from dataclasses import dataclass
from typing import Any, Callable


@dataclass
class ToolDescription:
    """
    Represents a tool with its metadata and functionality.

    Attributes:
        name (str): The name of the tool.
        signature (str): A string representing the tool's function signature.
        description (str): A brief explanation of what the tool does.
        example_json (str): An example JSON string showing how to call the tool.
        function (Callable): The callable function associated with the tool.
    """

    name: str
    signature: str
    description: str
    example_json: str
    function: Callable

    def get_prompt(self) -> str:
        """
        Constructs a detailed prompt describing the tool.

        Returns:
            str: A string combining the tool's signature, description, and an example call.
        """
        return f"{self.signature} - {self.description}. Example tool call: \n{self.example_json}"


@dataclass
class AgentResponse:
    """
    Base class for all responses generated by an agent.

    Attributes:
        text (str): The textual content of the agent's response.
    """

    text: str


@dataclass
class ToolResponse(AgentResponse):
    """
    Represents a response generated by an agent after using a tool.

    Attributes:
        text (str): The textual content of the agent's response.
        tool_name (str): The name of the tool that was used.
        tool_result (Any): The result or output produced by the tool.
    """

    tool_name: str
    tool_result: Any


@dataclass
class TextResponse(AgentResponse):
    """
    Represents a purely textual response generated by an agent, without tool usage.
    """

    pass
